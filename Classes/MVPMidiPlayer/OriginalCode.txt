MVPMidiPlayer.h

//Extra comments from original code

//#include <CoreMidi/MIDIServices.h>
//#include <CoreMidi/MIDISetup.h>
//#include <CoreMidi/MIDIThruConnection.h>
//#include <CoreMidi/MIDIDriver.h>
//#import  <CoreMIDI/CoreMIDI.h>

//#import <UIKit/UIKit.h>
//#include <AudioToolbox/AudioToolbox.h> //for AUGraph


//#import <AVFoundation/AVFoundation.h>
//#import <CoreAudio/CoreAudioTypes.h>

//#include <CoreFoundation/CoreFoundation.h>


MVPMidiPlayer.m

/******************************************************************************/
#pragma mark -
#pragma mark Original code
/*-(void)originalCode {
	
    OSStatus result = noErr;
    
    
    [self createAUGraph];
    [self configureAndStartAudioProcessingGraph: self.processingGraph];
    
    // Create a client
    MIDIClientRef virtualMidi;
    result = MIDIClientCreate(CFSTR("Virtual Client"),
                              MyMIDINotifyProc,
                              NULL,
                              &virtualMidi);
    
    NSAssert( result == noErr, @"MIDIClientCreate failed. Error code: %d '%.4s'", (int) result, (const char *)&result);
    
    // Create an endpoint
    MIDIEndpointRef virtualEndpoint;
    result = MIDIDestinationCreate(virtualMidi, @"Virtual Destination", MyMIDIReadProc, self.samplerUnit, &virtualEndpoint);
    
    NSAssert( result == noErr, @"MIDIDestinationCreate failed. Error code: %d '%.4s'", (int) result, (const char *)&result);
    

    
    // Create a new music sequence
    MusicSequence s;
    // Initialise the music sequence
    NewMusicSequence(&s);
    
    // Get a string to the path of the MIDI file which
    // should be located in the Resources folder
    NSString *midiFilePath = [[NSBundle mainBundle]
                               pathForResource:@"simpletest"
                               ofType:@"mid"];
    
    // Create a new URL which points to the MIDI file
    NSURL * midiFileURL = [NSURL fileURLWithPath:midiFilePath];
                        
    
    MusicSequenceFileLoad(s, (__bridge CFURLRef) midiFileURL, 0, 0);
    
    // Create a new music player
    MusicPlayer  p;
    // Initialise the music player
    NewMusicPlayer(&p);

    // Set the endpoint of the sequence to be our virtual endpoint
    MusicSequenceSetMIDIEndpoint(s, virtualEndpoint);
    
    // Load the sound font from file, use preset 1 for piano
    NSURL *presetURL = [[NSURL alloc] initFileURLWithPath:[[NSBundle mainBundle] pathForResource:@"ChoriumRevA" ofType:@"SF2"]];
    
    // Initialise the sound font
    [self loadFromDLSOrSoundFont: (NSURL *)presetURL withPatch: (int)1];

    // Load the sequence into the music player
    MusicPlayerSetSequence(p, s);
    // Called to do some MusicPlayer setup. This just 
    // reduces latency when MusicPlayerStart is called
    MusicPlayerPreroll(p);
    // Starts the music playing
    MusicPlayerStart(p);

    // Get length of track so that we know how long to kill time for
    MusicTrack t;
    MusicTimeStamp len;
    UInt32 sz = sizeof(MusicTimeStamp);
    MusicSequenceGetIndTrack(s, 1, &t);
    MusicTrackGetProperty(t, kSequenceTrackProperty_TrackLength, &len, &sz);
    
    
    while (1) { // kill time until the music is over
        usleep (3 * 1000 * 1000); //suspend thread execution, measured in microseconds
        MusicTimeStamp now = 0;
        MusicPlayerGetTime (p, &now);
        if (now >= len)
            break;
    }
    
    // Stop the player and dispose of the objects
    MusicPlayerStop(p);
    DisposeMusicSequence(s);
    DisposeMusicPlayer(p);
    

*/


